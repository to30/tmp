---
#
# Usage: ansible-playbook -i inventory -e target=web|app|dbs create_sample_vm.yml
# Required: ansible-v1.8 or later and openrc
#
- hosts: localhost

  vars:
    auth:
      url: "{{ lookup('env', 'OS_AUTH_URL') }}"
      region_name: "{{ lookup('env', 'OS_REGION_NAME') }}"
      tenant_name: "{{ lookup('env', 'OS_TENANT_NAME') }}"
      username: "{{ lookup('env', 'OS_USERNAME') }}"
      password: "{{ lookup('env', 'OS_PASSWORD') }}"
    networks:
      os_dmz_net: "{{ lookup('env', 'OS_DMZ_NET') }}"
      os_app_net: "{{ lookup('env', 'OS_APP_NET') }}"
      os_dbs_net: "{{ lookup('env', 'OS_DBS_NET') }}"
      os_ext_net_list:
      - "Ext-Net"
    spec:
      web:
        flavor_ram: 1024
        flavor_name: "standard.xsmall"
        image_name: "centos-base"
        key_name: "key-for-ansible"
        secgroups: "sg-all-from-console,sg-web-from-internet,sg-all-from-app-net"
        availability_zone: "az1"
        networks:
        - net-id: "{{ networks.os_dmz_net }}"
        - net-id: "{{ networks.os_app_net }}"
        floating_ip: yes
      app:
        flavor_ram: 1024
        flavor_name: "standard.xsmall"
        image_name: "centos-base"
        key_name: "key-for-ansible"
        secgroups: "sg-all-from-console,sg-all-from-app-net,sg-all-from-dbs-net"
        availability_zone: "az1"
        networks:
        - net-id: "{{ networks.os_dmz_net }}"
        - net-id: "{{ networks.os_app_net }}"
        - net-id: "{{ networks.os_dbs_net }}"
        floating_ip: no
      dbs:
        flavor_ram: 1024
        flavor_name: "standard.xsmall"
        image_name: "centos-base"
        key_name: "key-for-ansible"
        secgroups: "sg-all-from-console,sg-all-from-dbs-net"
        availability_zone: "az1"
        networks:
        - net-id: "{{ networks.os_dmz_net }}"
        - net-id: "{{ networks.os_dbs_net }}"
        floating_ip: no

  tasks:
  - name: ansible_python_interpreter setup
    set_fact: ansible_python_interpreter="{{ lookup('pipe', 'which python') }}"
  - name: get uuid for generate hostname
    command: /usr/bin/uuidgen
    register: result_uuid
    when: target in ["web", "app", "dbs"]
  - name: create {{ target }}-server on nova-compute with floating_ip
    nova_compute:
      state: present
      auth_url: "{{ auth.url }}"
      region_name: "{{ auth.region_name }}"
      login_tenant_name: "{{ auth.tenant_name }}"
      login_username: "{{ auth.username }}"
      login_password: "{{ auth.password }}"
      availability_zone: "{{ spec[target].availability_zone }}"
      flavor_ram: "{{ spec[target].flavor_ram }}"
      flavor_include: "{{ spec[target].flavor_name }}"
      floating_ip_pools: "{{ networks.os_ext_net_list }}"
      image_name: "{{ spec[target].image_name }}"
      key_name: "{{  spec[target].key_name }}"
      #name: "{{ target }}-{{ result_uuid.stdout }}"
      name: "{{ target }}-ansible"
      nics: "{{ spec[target].networks }}"
      security_groups: "{{ spec[target].secgroups }}"
    when: (target in ["web","app","dbs"]) and (spec[target].floating_ip)
  - name: create {{ target }}-server on nova-compute without floating_ip
    nova_compute:
      state: present
      auth_url: "{{ auth.url }}"
      region_name: "{{ auth.region_name }}"
      login_tenant_name: "{{ auth.tenant_name }}"
      login_username: "{{ auth.username }}"
      login_password: "{{ auth.password }}"
      availability_zone: "{{ spec[target].availability_zone }}"
      flavor_ram: "{{ spec[target].flavor_ram }}"
      flavor_include: "{{ spec[target].flavor_name }}"
      image_name: "{{ spec[target].image_name }}"
      key_name: "{{  spec[target].key_name }}"
      #name: "{{ target }}-{{ result_uuid.stdout }}"
      name: "{{ target }}-ansible-nofloating-ip"
      nics: "{{ spec[target].networks }}"
      security_groups: "{{ spec[target].secgroups }}"
    when: (target in ["web","app","dbs"]) and (not spec[target].floating_ip)

#
# [EOF]
#
